{
    "sourceFile": "main/st7796s.h",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1731815031194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1732332356186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+// main/st7796s.h\r\n+\r\n #ifndef MAIN_ST7796S_H_\r\n #define MAIN_ST7796S_H_\r\n \r\n #include \"driver/spi_master.h\"\r\n@@ -53,10 +55,11 @@\n // Delay function\r\n void delayMS(int ms);\r\n \r\n // LCD initialization\r\n-void lcdInit(TFT_t *dev, int width, int height, int offsetx, int offsety);\r\n+void lcdInit(TFT_t *dev, int width, int height, int offsetx, int offsety, uint8_t orientation);\r\n \r\n+\r\n // Drawing functions\r\n void lcdDrawPixel(TFT_t *dev, uint16_t x, uint16_t y, uint16_t color);\r\n void lcdDrawMultiPixels(TFT_t *dev, uint16_t x, uint16_t y, uint16_t size, uint16_t *colors);\r\n void lcdDrawFillRect(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\n"
                },
                {
                    "date": 1732462179926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,8 +38,26 @@\n     int16_t  _reset;\r\n     spi_device_handle_t _SPIHandle;\r\n } TFT_t;\r\n \r\n+typedef struct {\r\n+    // For Shadows (dark areas)\r\n+    int shadows_cyan_red;       // Range from -100 to 100 (%)\r\n+    int shadows_magenta_green;  // Range from -100 to 100 (%)\r\n+    int shadows_yellow_blue;    // Range from -100 to 100 (%)\r\n+\r\n+    // For Midtones (medium brightness areas)\r\n+    int midtones_cyan_red;\r\n+    int midtones_magenta_green;\r\n+    int midtones_yellow_blue;\r\n+\r\n+    // For Highlights (bright areas)\r\n+    int highlights_cyan_red;\r\n+    int highlights_magenta_green;\r\n+    int highlights_yellow_blue;\r\n+} ColorTweaks;\r\n+\r\n+\r\n // SPI initialization\r\n void spi_master_init(TFT_t *dev, int16_t GPIO_MOSI, int16_t GPIO_SCLK, int16_t GPIO_CS,\r\n                      int16_t GPIO_DC, int16_t GPIO_RESET, int16_t GPIO_BL);\r\n \r\n"
                },
                {
                    "date": 1732462202717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,134 @@\n+// main/st7796s.h\r\n+\r\n+#ifndef MAIN_ST7796S_H_\r\n+#define MAIN_ST7796S_H_\r\n+\r\n+#include \"driver/spi_master.h\"\r\n+#include \"fontx.h\"\r\n+\r\n+// Color definitions in RGB565 format\r\n+#define RED             0xF800\r\n+#define GREEN           0x07E0\r\n+#define BLUE            0x001F\r\n+#define BLACK           0x0000\r\n+#define WHITE           0xFFFF\r\n+#define GRAY            0x8410\r\n+#define YELLOW          0xFFE0\r\n+#define CYAN            0x07FF\r\n+#define PURPLE          0xF81F\r\n+\r\n+// Display orientations\r\n+#define DIRECTION0      0\r\n+#define DIRECTION90     1\r\n+#define DIRECTION180    2\r\n+#define DIRECTION270    3\r\n+\r\n+typedef struct {\r\n+    uint16_t _width;\r\n+    uint16_t _height;\r\n+    uint16_t _offsetx;\r\n+    uint16_t _offsety;\r\n+    uint16_t _font_direction;\r\n+    bool     _font_fill;\r\n+    uint16_t _font_fill_color;\r\n+    bool     _font_underline;\r\n+    uint16_t _font_underline_color;\r\n+    int16_t  _dc;\r\n+    int16_t  _bl;\r\n+    int16_t  _reset;\r\n+    spi_device_handle_t _SPIHandle;\r\n+} TFT_t;\r\n+\r\n+typedef struct {\r\n+    // For Shadows (dark areas)\r\n+    int shadows_cyan_red;       // Range from -100 to 100 (%)\r\n+    int shadows_magenta_green;  // Range from -100 to 100 (%)\r\n+    int shadows_yellow_blue;    // Range from -100 to 100 (%)\r\n+\r\n+    // For Midtones (medium brightness areas)\r\n+    int midtones_cyan_red;\r\n+    int midtones_magenta_green;\r\n+    int midtones_yellow_blue;\r\n+\r\n+    // For Highlights (bright areas)\r\n+    int highlights_cyan_red;\r\n+    int highlights_magenta_green;\r\n+    int highlights_yellow_blue;\r\n+} ColorTweaks;\r\n+\r\n+\r\n+// SPI initialization\r\n+void spi_master_init(TFT_t *dev, int16_t GPIO_MOSI, int16_t GPIO_SCLK, int16_t GPIO_CS,\r\n+                     int16_t GPIO_DC, int16_t GPIO_RESET, int16_t GPIO_BL);\r\n+\r\n+// SPI communication functions\r\n+bool spi_master_write_byte(spi_device_handle_t SPIHandle, const uint8_t *Data, size_t DataLength);\r\n+bool spi_master_write_command(TFT_t *dev, uint8_t cmd);\r\n+bool spi_master_write_data_byte(TFT_t *dev, uint8_t data);\r\n+bool spi_master_write_data_word(TFT_t *dev, uint16_t data);\r\n+bool spi_master_write_addr(TFT_t *dev, uint16_t addr1, uint16_t addr2);\r\n+bool spi_master_write_color(TFT_t *dev, uint16_t color, uint32_t size);\r\n+bool spi_master_write_colors(TFT_t *dev, uint16_t *colors, uint16_t size);\r\n+\r\n+// Delay function\r\n+void delayMS(int ms);\r\n+\r\n+// LCD initialization\r\n+void lcdInit(TFT_t *dev, int width, int height, int offsetx, int offsety, uint8_t orientation);\r\n+\r\n+// Drawing functions\r\n+void lcdDrawPixel(TFT_t *dev, uint16_t x, uint16_t y, uint16_t color);\r\n+void lcdDrawMultiPixels(TFT_t *dev, uint16_t x, uint16_t y, uint16_t size, uint16_t *colors);\r\n+void lcdDrawFillRect(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\n+void lcdFillScreen(TFT_t *dev, uint16_t color);\r\n+void lcdDrawLine(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\n+void lcdDrawRect(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\n+void lcdDrawRectAngle(TFT_t *dev, uint16_t xc, uint16_t yc, uint16_t w, uint16_t h,\r\n+                      uint16_t angle, uint16_t color);\r\n+void lcdDrawTriangle(TFT_t *dev, uint16_t xc, uint16_t yc, uint16_t w, uint16_t h,\r\n+                     uint16_t angle, uint16_t color);\r\n+void lcdDrawCircle(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t r, uint16_t color);\r\n+void lcdDrawFillCircle(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t r, uint16_t color);\r\n+void lcdDrawRoundRect(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,\r\n+                      uint16_t r, uint16_t color);\r\n+void lcdDrawArrow(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,\r\n+                  uint16_t w, uint16_t color);\r\n+void lcdDrawFillArrow(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,\r\n+                      uint16_t w, uint16_t color);\r\n+\r\n+// Color conversion\r\n+uint16_t rgb565_conv_with_color_tweaks(\r\n+    uint16_t r, uint16_t g, uint16_t b,       // Input RGB values (0-255)\r\n+    float gamma_r, float gamma_g, float gamma_b, // Gamma correction values\r\n+    ColorTweaks color_tweaks                  // Color adjustment parameters\r\n+);\r\n+\r\n+\r\n+// Font drawing functions\r\n+int lcdDrawChar(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n+                uint8_t ascii, uint16_t color);\r\n+int lcdDrawString(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n+                  uint8_t *ascii, uint16_t color);\r\n+int lcdDrawCode(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n+                uint8_t code, uint16_t color);\r\n+// int lcdDrawUTF8Char(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n+//                     uint8_t *utf8, uint16_t color);\r\n+// int lcdDrawUTF8String(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n+//                       unsigned char *utfs, uint16_t color);\r\n+\r\n+// Font settings\r\n+void lcdSetFontDirection(TFT_t *dev, uint16_t dir);\r\n+void lcdSetFontFill(TFT_t *dev, uint16_t color);\r\n+void lcdUnsetFontFill(TFT_t *dev);\r\n+void lcdSetFontUnderLine(TFT_t *dev, uint16_t color);\r\n+void lcdUnsetFontUnderLine(TFT_t *dev);\r\n+\r\n+// Display control functions\r\n+void lcdDisplayOff(TFT_t *dev);\r\n+void lcdDisplayOn(TFT_t *dev);\r\n+void lcdInversionOff(TFT_t *dev);\r\n+void lcdInversionOn(TFT_t *dev);\r\n+void lcdBacklightOff(TFT_t *dev);\r\n+void lcdBacklightOn(TFT_t *dev);\r\n+\r\n+#endif /* MAIN_ST7796S_H_ */\r\n"
                },
                {
                    "date": 1732462619684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,145 +96,17 @@\n void lcdDrawFillArrow(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,\r\n                       uint16_t w, uint16_t color);\r\n \r\n // Color conversion\r\n+// Function prototype\r\n uint16_t rgb565_conv_with_color_tweaks(\r\n-    uint16_t r, uint16_t g, uint16_t b,       // Input RGB values (0-255)\r\n-    float gamma_r, float gamma_g, float gamma_b, // Gamma correction values\r\n-    ColorTweaks color_tweaks                  // Color adjustment parameters\r\n+    uint16_t r, uint16_t g, uint16_t b,\r\n+    float gamma_r, float gamma_g, float gamma_b,\r\n+    ColorTweaks color_tweaks\r\n );\r\n \r\n \r\n-// Font drawing functions\r\n-int lcdDrawChar(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n-                uint8_t ascii, uint16_t color);\r\n-int lcdDrawString(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n-                  uint8_t *ascii, uint16_t color);\r\n-int lcdDrawCode(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n-                uint8_t code, uint16_t color);\r\n-// int lcdDrawUTF8Char(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n-//                     uint8_t *utf8, uint16_t color);\r\n-// int lcdDrawUTF8String(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n-//                       unsigned char *utfs, uint16_t color);\r\n \r\n-// Font settings\r\n-void lcdSetFontDirection(TFT_t *dev, uint16_t dir);\r\n-void lcdSetFontFill(TFT_t *dev, uint16_t color);\r\n-void lcdUnsetFontFill(TFT_t *dev);\r\n-void lcdSetFontUnderLine(TFT_t *dev, uint16_t color);\r\n-void lcdUnsetFontUnderLine(TFT_t *dev);\r\n-\r\n-// Display control functions\r\n-void lcdDisplayOff(TFT_t *dev);\r\n-void lcdDisplayOn(TFT_t *dev);\r\n-void lcdInversionOff(TFT_t *dev);\r\n-void lcdInversionOn(TFT_t *dev);\r\n-void lcdBacklightOff(TFT_t *dev);\r\n-void lcdBacklightOn(TFT_t *dev);\r\n-\r\n-#endif /* MAIN_ST7796S_H_ */\r\n-// main/st7796s.h\r\n-\r\n-#ifndef MAIN_ST7796S_H_\r\n-#define MAIN_ST7796S_H_\r\n-\r\n-#include \"driver/spi_master.h\"\r\n-#include \"fontx.h\"\r\n-\r\n-// Color definitions in RGB565 format\r\n-#define RED             0xF800\r\n-#define GREEN           0x07E0\r\n-#define BLUE            0x001F\r\n-#define BLACK           0x0000\r\n-#define WHITE           0xFFFF\r\n-#define GRAY            0x8410\r\n-#define YELLOW          0xFFE0\r\n-#define CYAN            0x07FF\r\n-#define PURPLE          0xF81F\r\n-\r\n-// Display orientations\r\n-#define DIRECTION0      0\r\n-#define DIRECTION90     1\r\n-#define DIRECTION180    2\r\n-#define DIRECTION270    3\r\n-\r\n-typedef struct {\r\n-    uint16_t _width;\r\n-    uint16_t _height;\r\n-    uint16_t _offsetx;\r\n-    uint16_t _offsety;\r\n-    uint16_t _font_direction;\r\n-    bool     _font_fill;\r\n-    uint16_t _font_fill_color;\r\n-    bool     _font_underline;\r\n-    uint16_t _font_underline_color;\r\n-    int16_t  _dc;\r\n-    int16_t  _bl;\r\n-    int16_t  _reset;\r\n-    spi_device_handle_t _SPIHandle;\r\n-} TFT_t;\r\n-\r\n-typedef struct {\r\n-    // For Shadows (dark areas)\r\n-    int shadows_cyan_red;       // Range from -100 to 100 (%)\r\n-    int shadows_magenta_green;  // Range from -100 to 100 (%)\r\n-    int shadows_yellow_blue;    // Range from -100 to 100 (%)\r\n-\r\n-    // For Midtones (medium brightness areas)\r\n-    int midtones_cyan_red;\r\n-    int midtones_magenta_green;\r\n-    int midtones_yellow_blue;\r\n-\r\n-    // For Highlights (bright areas)\r\n-    int highlights_cyan_red;\r\n-    int highlights_magenta_green;\r\n-    int highlights_yellow_blue;\r\n-} ColorTweaks;\r\n-\r\n-\r\n-// SPI initialization\r\n-void spi_master_init(TFT_t *dev, int16_t GPIO_MOSI, int16_t GPIO_SCLK, int16_t GPIO_CS,\r\n-                     int16_t GPIO_DC, int16_t GPIO_RESET, int16_t GPIO_BL);\r\n-\r\n-// SPI communication functions\r\n-bool spi_master_write_byte(spi_device_handle_t SPIHandle, const uint8_t *Data, size_t DataLength);\r\n-bool spi_master_write_command(TFT_t *dev, uint8_t cmd);\r\n-bool spi_master_write_data_byte(TFT_t *dev, uint8_t data);\r\n-bool spi_master_write_data_word(TFT_t *dev, uint16_t data);\r\n-bool spi_master_write_addr(TFT_t *dev, uint16_t addr1, uint16_t addr2);\r\n-bool spi_master_write_color(TFT_t *dev, uint16_t color, uint32_t size);\r\n-bool spi_master_write_colors(TFT_t *dev, uint16_t *colors, uint16_t size);\r\n-\r\n-// Delay function\r\n-void delayMS(int ms);\r\n-\r\n-// LCD initialization\r\n-void lcdInit(TFT_t *dev, int width, int height, int offsetx, int offsety, uint8_t orientation);\r\n-\r\n-\r\n-// Drawing functions\r\n-void lcdDrawPixel(TFT_t *dev, uint16_t x, uint16_t y, uint16_t color);\r\n-void lcdDrawMultiPixels(TFT_t *dev, uint16_t x, uint16_t y, uint16_t size, uint16_t *colors);\r\n-void lcdDrawFillRect(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\n-void lcdFillScreen(TFT_t *dev, uint16_t color);\r\n-void lcdDrawLine(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\n-void lcdDrawRect(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\n-void lcdDrawRectAngle(TFT_t *dev, uint16_t xc, uint16_t yc, uint16_t w, uint16_t h,\r\n-                      uint16_t angle, uint16_t color);\r\n-void lcdDrawTriangle(TFT_t *dev, uint16_t xc, uint16_t yc, uint16_t w, uint16_t h,\r\n-                     uint16_t angle, uint16_t color);\r\n-void lcdDrawCircle(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t r, uint16_t color);\r\n-void lcdDrawFillCircle(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t r, uint16_t color);\r\n-void lcdDrawRoundRect(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,\r\n-                      uint16_t r, uint16_t color);\r\n-void lcdDrawArrow(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,\r\n-                  uint16_t w, uint16_t color);\r\n-void lcdDrawFillArrow(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,\r\n-                      uint16_t w, uint16_t color);\r\n-\r\n-// Color conversion\r\n-uint16_t rgb565_conv(uint16_t r, uint16_t g, uint16_t b);\r\n-\r\n // Font drawing functions\r\n int lcdDrawChar(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n                 uint8_t ascii, uint16_t color);\r\n int lcdDrawString(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n"
                },
                {
                    "date": 1732462631053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,8 @@\n                   uint16_t w, uint16_t color);\r\n void lcdDrawFillArrow(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,\r\n                       uint16_t w, uint16_t color);\r\n \r\n-// Color conversion\r\n // Function prototype\r\n uint16_t rgb565_conv_with_color_tweaks(\r\n     uint16_t r, uint16_t g, uint16_t b,\r\n     float gamma_r, float gamma_g, float gamma_b,\r\n"
                },
                {
                    "date": 1732463963232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,8 @@\n     int highlights_magenta_green;\r\n     int highlights_yellow_blue;\r\n } ColorTweaks;\r\n \r\n-\r\n // SPI initialization\r\n void spi_master_init(TFT_t *dev, int16_t GPIO_MOSI, int16_t GPIO_SCLK, int16_t GPIO_CS,\r\n                      int16_t GPIO_DC, int16_t GPIO_RESET, int16_t GPIO_BL);\r\n \r\n@@ -95,17 +94,13 @@\n                   uint16_t w, uint16_t color);\r\n void lcdDrawFillArrow(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,\r\n                       uint16_t w, uint16_t color);\r\n \r\n-// Function prototype\r\n+// Color conversion\r\n uint16_t rgb565_conv_with_color_tweaks(\r\n-    uint16_t r, uint16_t g, uint16_t b,\r\n-    float gamma_r, float gamma_g, float gamma_b,\r\n-    ColorTweaks color_tweaks\r\n+    uint16_t r, uint16_t g, uint16_t b\r\n );\r\n \r\n-\r\n-\r\n // Font drawing functions\r\n int lcdDrawChar(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n                 uint8_t ascii, uint16_t color);\r\n int lcdDrawString(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n"
                },
                {
                    "date": 1732471770792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,142 @@\n+// main/st7796s.h\r\n+\r\n+#ifndef MAIN_ST7796S_H_\r\n+#define MAIN_ST7796S_H_\r\n+\r\n+#include \"driver/spi_master.h\"\r\n+#include \"fontx.h\"\r\n+\r\n+// Color definitions in RGB565 format\r\n+#define RED             0xF800\r\n+#define GREEN           0x07E0\r\n+#define BLUE            0x001F\r\n+#define BLACK           0x0000\r\n+#define WHITE           0xFFFF\r\n+#define GRAY            0x8410\r\n+#define YELLOW          0xFFE0\r\n+#define CYAN            0x07FF\r\n+#define PURPLE          0xF81F\r\n+\r\n+// Display orientations\r\n+#define DIRECTION0      0\r\n+#define DIRECTION90     1\r\n+#define DIRECTION180    2\r\n+#define DIRECTION270    3\r\n+\r\n+#ifdef CONFIG_ORIENTATION_LANDSCAPE\r\n+    orientation = ORIENTATION_LANDSCAPE;\r\n+#elif defined(CONFIG_ORIENTATION_PORTRAIT)\r\n+    orientation = ORIENTATION_PORTRAIT;\r\n+#elif defined(CONFIG_ORIENTATION_INVERTED_LANDSCAPE)\r\n+    orientation = ORIENTATION_INV_LANDSCAPE;\r\n+#elif defined(CONFIG_ORIENTATION_INVERTED_PORTRAIT)\r\n+    orientation = ORIENTATION_INV_PORTRAIT;\r\n+#else\r\n+    orientation = ORIENTATION_LANDSCAPE; // Default orientation\r\n+#endif\r\n+\r\n+typedef struct {\r\n+    uint16_t _width;\r\n+    uint16_t _height;\r\n+    uint16_t _offsetx;\r\n+    uint16_t _offsety;\r\n+    uint16_t _font_direction;\r\n+    bool     _font_fill;\r\n+    uint16_t _font_fill_color;\r\n+    bool     _font_underline;\r\n+    uint16_t _font_underline_color;\r\n+    int16_t  _dc;\r\n+    int16_t  _bl;\r\n+    int16_t  _reset;\r\n+    spi_device_handle_t _SPIHandle;\r\n+} TFT_t;\r\n+\r\n+typedef struct {\r\n+    // For Shadows (dark areas)\r\n+    int shadows_cyan_red;       // Range from -100 to 100 (%)\r\n+    int shadows_magenta_green;  // Range from -100 to 100 (%)\r\n+    int shadows_yellow_blue;    // Range from -100 to 100 (%)\r\n+\r\n+    // For Midtones (medium brightness areas)\r\n+    int midtones_cyan_red;\r\n+    int midtones_magenta_green;\r\n+    int midtones_yellow_blue;\r\n+\r\n+    // For Highlights (bright areas)\r\n+    int highlights_cyan_red;\r\n+    int highlights_magenta_green;\r\n+    int highlights_yellow_blue;\r\n+} ColorTweaks;\r\n+\r\n+// SPI initialization\r\n+void spi_master_init(TFT_t *dev, int16_t GPIO_MOSI, int16_t GPIO_SCLK, int16_t GPIO_CS,\r\n+                     int16_t GPIO_DC, int16_t GPIO_RESET, int16_t GPIO_BL);\r\n+\r\n+// SPI communication functions\r\n+bool spi_master_write_byte(spi_device_handle_t SPIHandle, const uint8_t *Data, size_t DataLength);\r\n+bool spi_master_write_command(TFT_t *dev, uint8_t cmd);\r\n+bool spi_master_write_data_byte(TFT_t *dev, uint8_t data);\r\n+bool spi_master_write_data_word(TFT_t *dev, uint16_t data);\r\n+bool spi_master_write_addr(TFT_t *dev, uint16_t addr1, uint16_t addr2);\r\n+bool spi_master_write_color(TFT_t *dev, uint16_t color, uint32_t size);\r\n+bool spi_master_write_colors(TFT_t *dev, uint16_t *colors, uint16_t size);\r\n+\r\n+// Delay function\r\n+void delayMS(int ms);\r\n+\r\n+// LCD initialization\r\n+void lcdInit(TFT_t *dev, int width, int height, int offsetx, int offsety, uint8_t orientation);\r\n+\r\n+// Drawing functions\r\n+void lcdDrawPixel(TFT_t *dev, uint16_t x, uint16_t y, uint16_t color);\r\n+void lcdDrawMultiPixels(TFT_t *dev, uint16_t x, uint16_t y, uint16_t size, uint16_t *colors);\r\n+void lcdDrawFillRect(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\n+void lcdFillScreen(TFT_t *dev, uint16_t color);\r\n+void lcdDrawLine(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\n+void lcdDrawRect(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\n+void lcdDrawRectAngle(TFT_t *dev, uint16_t xc, uint16_t yc, uint16_t w, uint16_t h,\r\n+                      uint16_t angle, uint16_t color);\r\n+void lcdDrawTriangle(TFT_t *dev, uint16_t xc, uint16_t yc, uint16_t w, uint16_t h,\r\n+                     uint16_t angle, uint16_t color);\r\n+void lcdDrawCircle(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t r, uint16_t color);\r\n+void lcdDrawFillCircle(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t r, uint16_t color);\r\n+void lcdDrawRoundRect(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,\r\n+                      uint16_t r, uint16_t color);\r\n+void lcdDrawArrow(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,\r\n+                  uint16_t w, uint16_t color);\r\n+void lcdDrawFillArrow(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,\r\n+                      uint16_t w, uint16_t color);\r\n+\r\n+// Color conversion\r\n+uint16_t rgb565_conv_with_color_tweaks(\r\n+    uint16_t r, uint16_t g, uint16_t b\r\n+);\r\n+\r\n+// Font drawing functions\r\n+int lcdDrawChar(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n+                uint8_t ascii, uint16_t color);\r\n+int lcdDrawString(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n+                  uint8_t *ascii, uint16_t color);\r\n+int lcdDrawCode(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n+                uint8_t code, uint16_t color);\r\n+// int lcdDrawUTF8Char(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n+//                     uint8_t *utf8, uint16_t color);\r\n+// int lcdDrawUTF8String(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n+//                       unsigned char *utfs, uint16_t color);\r\n+\r\n+// Font settings\r\n+void lcdSetFontDirection(TFT_t *dev, uint16_t dir);\r\n+void lcdSetFontFill(TFT_t *dev, uint16_t color);\r\n+void lcdUnsetFontFill(TFT_t *dev);\r\n+void lcdSetFontUnderLine(TFT_t *dev, uint16_t color);\r\n+void lcdUnsetFontUnderLine(TFT_t *dev);\r\n+\r\n+// Display control functions\r\n+void lcdDisplayOff(TFT_t *dev);\r\n+void lcdDisplayOn(TFT_t *dev);\r\n+void lcdInversionOff(TFT_t *dev);\r\n+void lcdInversionOn(TFT_t *dev);\r\n+void lcdBacklightOff(TFT_t *dev);\r\n+void lcdBacklightOn(TFT_t *dev);\r\n+\r\n+#endif /* MAIN_ST7796S_H_ */\r\n"
                },
                {
                    "date": 1732472588937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,136 @@\n+// main/st7796s.h\r\n+\r\n+#ifndef MAIN_ST7796S_H_\r\n+#define MAIN_ST7796S_H_\r\n+\r\n+#include \"driver/spi_master.h\"\r\n+#include \"fontx.h\"\r\n+\r\n+// Color definitions in RGB565 format\r\n+#define RED             0xF800\r\n+#define GREEN           0x07E0\r\n+#define BLUE            0x001F\r\n+#define BLACK           0x0000\r\n+#define WHITE           0xFFFF\r\n+#define GRAY            0x8410\r\n+#define YELLOW          0xFFE0\r\n+#define CYAN            0x07FF\r\n+#define PURPLE          0xF81F\r\n+\r\n+// Display orientations\r\n+#define DIRECTION0      0\r\n+#define DIRECTION90     1\r\n+#define DIRECTION180    2\r\n+#define DIRECTION270    3\r\n+\r\n+// Correctly define orientation constants for the display\r\n+#define ORIENTATION_LANDSCAPE           0x48 // Landscape orientation\r\n+#define ORIENTATION_PORTRAIT            0x28 // Portrait orientation\r\n+#define ORIENTATION_INVERTED_LANDSCAPE  0x88 // Inverted landscape orientation\r\n+#define ORIENTATION_INVERTED_PORTRAIT   0xE8 // Inverted portrait orientation\r\n+\r\n+typedef struct {\r\n+    uint16_t _width;\r\n+    uint16_t _height;\r\n+    uint16_t _offsetx;\r\n+    uint16_t _offsety;\r\n+    uint16_t _font_direction;\r\n+    bool     _font_fill;\r\n+    uint16_t _font_fill_color;\r\n+    bool     _font_underline;\r\n+    uint16_t _font_underline_color;\r\n+    int16_t  _dc;\r\n+    int16_t  _bl;\r\n+    int16_t  _reset;\r\n+    spi_device_handle_t _SPIHandle;\r\n+} TFT_t;\r\n+\r\n+typedef struct {\r\n+    // For Shadows (dark areas)\r\n+    int shadows_cyan_red;       // Range from -100 to 100 (%)\r\n+    int shadows_magenta_green;  // Range from -100 to 100 (%)\r\n+    int shadows_yellow_blue;    // Range from -100 to 100 (%)\r\n+\r\n+    // For Midtones (medium brightness areas)\r\n+    int midtones_cyan_red;\r\n+    int midtones_magenta_green;\r\n+    int midtones_yellow_blue;\r\n+\r\n+    // For Highlights (bright areas)\r\n+    int highlights_cyan_red;\r\n+    int highlights_magenta_green;\r\n+    int highlights_yellow_blue;\r\n+} ColorTweaks;\r\n+\r\n+// SPI initialization\r\n+void spi_master_init(TFT_t *dev, int16_t GPIO_MOSI, int16_t GPIO_SCLK, int16_t GPIO_CS,\r\n+                     int16_t GPIO_DC, int16_t GPIO_RESET, int16_t GPIO_BL);\r\n+\r\n+// SPI communication functions\r\n+bool spi_master_write_byte(spi_device_handle_t SPIHandle, const uint8_t *Data, size_t DataLength);\r\n+bool spi_master_write_command(TFT_t *dev, uint8_t cmd);\r\n+bool spi_master_write_data_byte(TFT_t *dev, uint8_t data);\r\n+bool spi_master_write_data_word(TFT_t *dev, uint16_t data);\r\n+bool spi_master_write_addr(TFT_t *dev, uint16_t addr1, uint16_t addr2);\r\n+bool spi_master_write_color(TFT_t *dev, uint16_t color, uint32_t size);\r\n+bool spi_master_write_colors(TFT_t *dev, uint16_t *colors, uint16_t size);\r\n+\r\n+// Delay function\r\n+void delayMS(int ms);\r\n+\r\n+// LCD initialization\r\n+void lcdInit(TFT_t *dev, int width, int height, int offsetx, int offsety, uint8_t orientation);\r\n+\r\n+// Drawing functions\r\n+void lcdDrawPixel(TFT_t *dev, uint16_t x, uint16_t y, uint16_t color);\r\n+void lcdDrawMultiPixels(TFT_t *dev, uint16_t x, uint16_t y, uint16_t size, uint16_t *colors);\r\n+void lcdDrawFillRect(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\n+void lcdFillScreen(TFT_t *dev, uint16_t color);\r\n+void lcdDrawLine(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\n+void lcdDrawRect(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\n+void lcdDrawRectAngle(TFT_t *dev, uint16_t xc, uint16_t yc, uint16_t w, uint16_t h,\r\n+                      uint16_t angle, uint16_t color);\r\n+void lcdDrawTriangle(TFT_t *dev, uint16_t xc, uint16_t yc, uint16_t w, uint16_t h,\r\n+                     uint16_t angle, uint16_t color);\r\n+void lcdDrawCircle(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t r, uint16_t color);\r\n+void lcdDrawFillCircle(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t r, uint16_t color);\r\n+void lcdDrawRoundRect(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,\r\n+                      uint16_t r, uint16_t color);\r\n+void lcdDrawArrow(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,\r\n+                  uint16_t w, uint16_t color);\r\n+void lcdDrawFillArrow(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,\r\n+                      uint16_t w, uint16_t color);\r\n+\r\n+// Color conversion\r\n+uint16_t rgb565_conv_with_color_tweaks(\r\n+    uint16_t r, uint16_t g, uint16_t b\r\n+);\r\n+\r\n+// Font drawing functions\r\n+int lcdDrawChar(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n+                uint8_t ascii, uint16_t color);\r\n+int lcdDrawString(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n+                  uint8_t *ascii, uint16_t color);\r\n+int lcdDrawCode(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n+                uint8_t code, uint16_t color);\r\n+// int lcdDrawUTF8Char(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n+//                     uint8_t *utf8, uint16_t color);\r\n+// int lcdDrawUTF8String(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n+//                       unsigned char *utfs, uint16_t color);\r\n+\r\n+// Font settings\r\n+void lcdSetFontDirection(TFT_t *dev, uint16_t dir);\r\n+void lcdSetFontFill(TFT_t *dev, uint16_t color);\r\n+void lcdUnsetFontFill(TFT_t *dev);\r\n+void lcdSetFontUnderLine(TFT_t *dev, uint16_t color);\r\n+void lcdUnsetFontUnderLine(TFT_t *dev);\r\n+\r\n+// Display control functions\r\n+void lcdDisplayOff(TFT_t *dev);\r\n+void lcdDisplayOn(TFT_t *dev);\r\n+void lcdInversionOff(TFT_t *dev);\r\n+void lcdInversionOn(TFT_t *dev);\r\n+void lcdBacklightOff(TFT_t *dev);\r\n+void lcdBacklightOn(TFT_t *dev);\r\n+\r\n+#endif /* MAIN_ST7796S_H_ */\r\n"
                },
                {
                    "date": 1732482914403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,4 @@\n-// main/st7796s.h\r\n-\r\n #ifndef MAIN_ST7796S_H_\r\n #define MAIN_ST7796S_H_\r\n \r\n #include \"driver/spi_master.h\"\r\n@@ -80,150 +78,12 @@\n \r\n // LCD initialization\r\n void lcdInit(TFT_t *dev, int width, int height, int offsetx, int offsety, uint8_t orientation);\r\n \r\n-// Drawing functions\r\n-void lcdDrawPixel(TFT_t *dev, uint16_t x, uint16_t y, uint16_t color);\r\n-void lcdDrawMultiPixels(TFT_t *dev, uint16_t x, uint16_t y, uint16_t size, uint16_t *colors);\r\n-void lcdDrawFillRect(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\n-void lcdFillScreen(TFT_t *dev, uint16_t color);\r\n-void lcdDrawLine(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\n-void lcdDrawRect(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\n-void lcdDrawRectAngle(TFT_t *dev, uint16_t xc, uint16_t yc, uint16_t w, uint16_t h,\r\n-                      uint16_t angle, uint16_t color);\r\n-void lcdDrawTriangle(TFT_t *dev, uint16_t xc, uint16_t yc, uint16_t w, uint16_t h,\r\n-                     uint16_t angle, uint16_t color);\r\n-void lcdDrawCircle(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t r, uint16_t color);\r\n-void lcdDrawFillCircle(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t r, uint16_t color);\r\n-void lcdDrawRoundRect(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,\r\n-                      uint16_t r, uint16_t color);\r\n-void lcdDrawArrow(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,\r\n-                  uint16_t w, uint16_t color);\r\n-void lcdDrawFillArrow(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,\r\n-                      uint16_t w, uint16_t color);\r\n+// Gamma and brightness/contrast initialization\r\n+void init_gamma_values(void);\r\n+void init_brightness_contrast_values(void);\r\n \r\n-// Color conversion\r\n-uint16_t rgb565_conv_with_color_tweaks(\r\n-    uint16_t r, uint16_t g, uint16_t b\r\n-);\r\n-\r\n-// Font drawing functions\r\n-int lcdDrawChar(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n-                uint8_t ascii, uint16_t color);\r\n-int lcdDrawString(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n-                  uint8_t *ascii, uint16_t color);\r\n-int lcdDrawCode(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n-                uint8_t code, uint16_t color);\r\n-// int lcdDrawUTF8Char(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n-//                     uint8_t *utf8, uint16_t color);\r\n-// int lcdDrawUTF8String(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n-//                       unsigned char *utfs, uint16_t color);\r\n-\r\n-// Font settings\r\n-void lcdSetFontDirection(TFT_t *dev, uint16_t dir);\r\n-void lcdSetFontFill(TFT_t *dev, uint16_t color);\r\n-void lcdUnsetFontFill(TFT_t *dev);\r\n-void lcdSetFontUnderLine(TFT_t *dev, uint16_t color);\r\n-void lcdUnsetFontUnderLine(TFT_t *dev);\r\n-\r\n-// Display control functions\r\n-void lcdDisplayOff(TFT_t *dev);\r\n-void lcdDisplayOn(TFT_t *dev);\r\n-void lcdInversionOff(TFT_t *dev);\r\n-void lcdInversionOn(TFT_t *dev);\r\n-void lcdBacklightOff(TFT_t *dev);\r\n-void lcdBacklightOn(TFT_t *dev);\r\n-\r\n-#endif /* MAIN_ST7796S_H_ */\r\n-// main/st7796s.h\r\n-\r\n-#ifndef MAIN_ST7796S_H_\r\n-#define MAIN_ST7796S_H_\r\n-\r\n-#include \"driver/spi_master.h\"\r\n-#include \"fontx.h\"\r\n-\r\n-// Color definitions in RGB565 format\r\n-#define RED             0xF800\r\n-#define GREEN           0x07E0\r\n-#define BLUE            0x001F\r\n-#define BLACK           0x0000\r\n-#define WHITE           0xFFFF\r\n-#define GRAY            0x8410\r\n-#define YELLOW          0xFFE0\r\n-#define CYAN            0x07FF\r\n-#define PURPLE          0xF81F\r\n-\r\n-// Display orientations\r\n-#define DIRECTION0      0\r\n-#define DIRECTION90     1\r\n-#define DIRECTION180    2\r\n-#define DIRECTION270    3\r\n-\r\n-#ifdef CONFIG_ORIENTATION_LANDSCAPE\r\n-    orientation = ORIENTATION_LANDSCAPE;\r\n-#elif defined(CONFIG_ORIENTATION_PORTRAIT)\r\n-    orientation = ORIENTATION_PORTRAIT;\r\n-#elif defined(CONFIG_ORIENTATION_INVERTED_LANDSCAPE)\r\n-    orientation = ORIENTATION_INV_LANDSCAPE;\r\n-#elif defined(CONFIG_ORIENTATION_INVERTED_PORTRAIT)\r\n-    orientation = ORIENTATION_INV_PORTRAIT;\r\n-#else\r\n-    orientation = ORIENTATION_LANDSCAPE; // Default orientation\r\n-#endif\r\n-\r\n-typedef struct {\r\n-    uint16_t _width;\r\n-    uint16_t _height;\r\n-    uint16_t _offsetx;\r\n-    uint16_t _offsety;\r\n-    uint16_t _font_direction;\r\n-    bool     _font_fill;\r\n-    uint16_t _font_fill_color;\r\n-    bool     _font_underline;\r\n-    uint16_t _font_underline_color;\r\n-    int16_t  _dc;\r\n-    int16_t  _bl;\r\n-    int16_t  _reset;\r\n-    spi_device_handle_t _SPIHandle;\r\n-} TFT_t;\r\n-\r\n-typedef struct {\r\n-    // For Shadows (dark areas)\r\n-    int shadows_cyan_red;       // Range from -100 to 100 (%)\r\n-    int shadows_magenta_green;  // Range from -100 to 100 (%)\r\n-    int shadows_yellow_blue;    // Range from -100 to 100 (%)\r\n-\r\n-    // For Midtones (medium brightness areas)\r\n-    int midtones_cyan_red;\r\n-    int midtones_magenta_green;\r\n-    int midtones_yellow_blue;\r\n-\r\n-    // For Highlights (bright areas)\r\n-    int highlights_cyan_red;\r\n-    int highlights_magenta_green;\r\n-    int highlights_yellow_blue;\r\n-} ColorTweaks;\r\n-\r\n-// SPI initialization\r\n-void spi_master_init(TFT_t *dev, int16_t GPIO_MOSI, int16_t GPIO_SCLK, int16_t GPIO_CS,\r\n-                     int16_t GPIO_DC, int16_t GPIO_RESET, int16_t GPIO_BL);\r\n-\r\n-// SPI communication functions\r\n-bool spi_master_write_byte(spi_device_handle_t SPIHandle, const uint8_t *Data, size_t DataLength);\r\n-bool spi_master_write_command(TFT_t *dev, uint8_t cmd);\r\n-bool spi_master_write_data_byte(TFT_t *dev, uint8_t data);\r\n-bool spi_master_write_data_word(TFT_t *dev, uint16_t data);\r\n-bool spi_master_write_addr(TFT_t *dev, uint16_t addr1, uint16_t addr2);\r\n-bool spi_master_write_color(TFT_t *dev, uint16_t color, uint32_t size);\r\n-bool spi_master_write_colors(TFT_t *dev, uint16_t *colors, uint16_t size);\r\n-\r\n-// Delay function\r\n-void delayMS(int ms);\r\n-\r\n-// LCD initialization\r\n-void lcdInit(TFT_t *dev, int width, int height, int offsetx, int offsety, uint8_t orientation);\r\n-\r\n // Drawing functions\r\n void lcdDrawPixel(TFT_t *dev, uint16_t x, uint16_t y, uint16_t color);\r\n void lcdDrawMultiPixels(TFT_t *dev, uint16_t x, uint16_t y, uint16_t size, uint16_t *colors);\r\n void lcdDrawFillRect(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\n@@ -275,134 +135,4 @@\n void lcdBacklightOff(TFT_t *dev);\r\n void lcdBacklightOn(TFT_t *dev);\r\n \r\n #endif /* MAIN_ST7796S_H_ */\r\n-// main/st7796s.h\r\n-\r\n-#ifndef MAIN_ST7796S_H_\r\n-#define MAIN_ST7796S_H_\r\n-\r\n-#include \"driver/spi_master.h\"\r\n-#include \"fontx.h\"\r\n-\r\n-// Color definitions in RGB565 format\r\n-#define RED             0xF800\r\n-#define GREEN           0x07E0\r\n-#define BLUE            0x001F\r\n-#define BLACK           0x0000\r\n-#define WHITE           0xFFFF\r\n-#define GRAY            0x8410\r\n-#define YELLOW          0xFFE0\r\n-#define CYAN            0x07FF\r\n-#define PURPLE          0xF81F\r\n-\r\n-// Display orientations\r\n-#define DIRECTION0      0\r\n-#define DIRECTION90     1\r\n-#define DIRECTION180    2\r\n-#define DIRECTION270    3\r\n-\r\n-typedef struct {\r\n-    uint16_t _width;\r\n-    uint16_t _height;\r\n-    uint16_t _offsetx;\r\n-    uint16_t _offsety;\r\n-    uint16_t _font_direction;\r\n-    bool     _font_fill;\r\n-    uint16_t _font_fill_color;\r\n-    bool     _font_underline;\r\n-    uint16_t _font_underline_color;\r\n-    int16_t  _dc;\r\n-    int16_t  _bl;\r\n-    int16_t  _reset;\r\n-    spi_device_handle_t _SPIHandle;\r\n-} TFT_t;\r\n-\r\n-typedef struct {\r\n-    // For Shadows (dark areas)\r\n-    int shadows_cyan_red;       // Range from -100 to 100 (%)\r\n-    int shadows_magenta_green;  // Range from -100 to 100 (%)\r\n-    int shadows_yellow_blue;    // Range from -100 to 100 (%)\r\n-\r\n-    // For Midtones (medium brightness areas)\r\n-    int midtones_cyan_red;\r\n-    int midtones_magenta_green;\r\n-    int midtones_yellow_blue;\r\n-\r\n-    // For Highlights (bright areas)\r\n-    int highlights_cyan_red;\r\n-    int highlights_magenta_green;\r\n-    int highlights_yellow_blue;\r\n-} ColorTweaks;\r\n-\r\n-// SPI initialization\r\n-void spi_master_init(TFT_t *dev, int16_t GPIO_MOSI, int16_t GPIO_SCLK, int16_t GPIO_CS,\r\n-                     int16_t GPIO_DC, int16_t GPIO_RESET, int16_t GPIO_BL);\r\n-\r\n-// SPI communication functions\r\n-bool spi_master_write_byte(spi_device_handle_t SPIHandle, const uint8_t *Data, size_t DataLength);\r\n-bool spi_master_write_command(TFT_t *dev, uint8_t cmd);\r\n-bool spi_master_write_data_byte(TFT_t *dev, uint8_t data);\r\n-bool spi_master_write_data_word(TFT_t *dev, uint16_t data);\r\n-bool spi_master_write_addr(TFT_t *dev, uint16_t addr1, uint16_t addr2);\r\n-bool spi_master_write_color(TFT_t *dev, uint16_t color, uint32_t size);\r\n-bool spi_master_write_colors(TFT_t *dev, uint16_t *colors, uint16_t size);\r\n-\r\n-// Delay function\r\n-void delayMS(int ms);\r\n-\r\n-// LCD initialization\r\n-void lcdInit(TFT_t *dev, int width, int height, int offsetx, int offsety, uint8_t orientation);\r\n-\r\n-// Drawing functions\r\n-void lcdDrawPixel(TFT_t *dev, uint16_t x, uint16_t y, uint16_t color);\r\n-void lcdDrawMultiPixels(TFT_t *dev, uint16_t x, uint16_t y, uint16_t size, uint16_t *colors);\r\n-void lcdDrawFillRect(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\n-void lcdFillScreen(TFT_t *dev, uint16_t color);\r\n-void lcdDrawLine(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\n-void lcdDrawRect(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\n-void lcdDrawRectAngle(TFT_t *dev, uint16_t xc, uint16_t yc, uint16_t w, uint16_t h,\r\n-                      uint16_t angle, uint16_t color);\r\n-void lcdDrawTriangle(TFT_t *dev, uint16_t xc, uint16_t yc, uint16_t w, uint16_t h,\r\n-                     uint16_t angle, uint16_t color);\r\n-void lcdDrawCircle(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t r, uint16_t color);\r\n-void lcdDrawFillCircle(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t r, uint16_t color);\r\n-void lcdDrawRoundRect(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,\r\n-                      uint16_t r, uint16_t color);\r\n-void lcdDrawArrow(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,\r\n-                  uint16_t w, uint16_t color);\r\n-void lcdDrawFillArrow(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,\r\n-                      uint16_t w, uint16_t color);\r\n-\r\n-// Color conversion\r\n-uint16_t rgb565_conv_with_color_tweaks(\r\n-    uint16_t r, uint16_t g, uint16_t b\r\n-);\r\n-\r\n-// Font drawing functions\r\n-int lcdDrawChar(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n-                uint8_t ascii, uint16_t color);\r\n-int lcdDrawString(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n-                  uint8_t *ascii, uint16_t color);\r\n-int lcdDrawCode(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n-                uint8_t code, uint16_t color);\r\n-// int lcdDrawUTF8Char(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n-//                     uint8_t *utf8, uint16_t color);\r\n-// int lcdDrawUTF8String(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n-//                       unsigned char *utfs, uint16_t color);\r\n-\r\n-// Font settings\r\n-void lcdSetFontDirection(TFT_t *dev, uint16_t dir);\r\n-void lcdSetFontFill(TFT_t *dev, uint16_t color);\r\n-void lcdUnsetFontFill(TFT_t *dev);\r\n-void lcdSetFontUnderLine(TFT_t *dev, uint16_t color);\r\n-void lcdUnsetFontUnderLine(TFT_t *dev);\r\n-\r\n-// Display control functions\r\n-void lcdDisplayOff(TFT_t *dev);\r\n-void lcdDisplayOn(TFT_t *dev);\r\n-void lcdInversionOff(TFT_t *dev);\r\n-void lcdInversionOn(TFT_t *dev);\r\n-void lcdBacklightOff(TFT_t *dev);\r\n-void lcdBacklightOn(TFT_t *dev);\r\n-\r\n-#endif /* MAIN_ST7796S_H_ */\r\n"
                },
                {
                    "date": 1732482923279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,140 @@\n+// main/st7796s.h\r\n+\r\n+#ifndef MAIN_ST7796S_H_\r\n+#define MAIN_ST7796S_H_\r\n+\r\n+#include \"driver/spi_master.h\"\r\n+#include \"fontx.h\"\r\n+\r\n+// Color definitions in RGB565 format\r\n+#define RED             0xF800\r\n+#define GREEN           0x07E0\r\n+#define BLUE            0x001F\r\n+#define BLACK           0x0000\r\n+#define WHITE           0xFFFF\r\n+#define GRAY            0x8410\r\n+#define YELLOW          0xFFE0\r\n+#define CYAN            0x07FF\r\n+#define PURPLE          0xF81F\r\n+\r\n+// Display orientations\r\n+#define DIRECTION0      0\r\n+#define DIRECTION90     1\r\n+#define DIRECTION180    2\r\n+#define DIRECTION270    3\r\n+\r\n+// Correctly define orientation constants for the display\r\n+#define ORIENTATION_LANDSCAPE           0x48 // Landscape orientation\r\n+#define ORIENTATION_PORTRAIT            0x28 // Portrait orientation\r\n+#define ORIENTATION_INVERTED_LANDSCAPE  0x88 // Inverted landscape orientation\r\n+#define ORIENTATION_INVERTED_PORTRAIT   0xE8 // Inverted portrait orientation\r\n+\r\n+typedef struct {\r\n+    uint16_t _width;\r\n+    uint16_t _height;\r\n+    uint16_t _offsetx;\r\n+    uint16_t _offsety;\r\n+    uint16_t _font_direction;\r\n+    bool     _font_fill;\r\n+    uint16_t _font_fill_color;\r\n+    bool     _font_underline;\r\n+    uint16_t _font_underline_color;\r\n+    int16_t  _dc;\r\n+    int16_t  _bl;\r\n+    int16_t  _reset;\r\n+    spi_device_handle_t _SPIHandle;\r\n+} TFT_t;\r\n+\r\n+typedef struct {\r\n+    // For Shadows (dark areas)\r\n+    int shadows_cyan_red;       // Range from -100 to 100 (%)\r\n+    int shadows_magenta_green;  // Range from -100 to 100 (%)\r\n+    int shadows_yellow_blue;    // Range from -100 to 100 (%)\r\n+\r\n+    // For Midtones (medium brightness areas)\r\n+    int midtones_cyan_red;\r\n+    int midtones_magenta_green;\r\n+    int midtones_yellow_blue;\r\n+\r\n+    // For Highlights (bright areas)\r\n+    int highlights_cyan_red;\r\n+    int highlights_magenta_green;\r\n+    int highlights_yellow_blue;\r\n+} ColorTweaks;\r\n+\r\n+// SPI initialization\r\n+void spi_master_init(TFT_t *dev, int16_t GPIO_MOSI, int16_t GPIO_SCLK, int16_t GPIO_CS,\r\n+                     int16_t GPIO_DC, int16_t GPIO_RESET, int16_t GPIO_BL);\r\n+\r\n+// SPI communication functions\r\n+bool spi_master_write_byte(spi_device_handle_t SPIHandle, const uint8_t *Data, size_t DataLength);\r\n+bool spi_master_write_command(TFT_t *dev, uint8_t cmd);\r\n+bool spi_master_write_data_byte(TFT_t *dev, uint8_t data);\r\n+bool spi_master_write_data_word(TFT_t *dev, uint16_t data);\r\n+bool spi_master_write_addr(TFT_t *dev, uint16_t addr1, uint16_t addr2);\r\n+bool spi_master_write_color(TFT_t *dev, uint16_t color, uint32_t size);\r\n+bool spi_master_write_colors(TFT_t *dev, uint16_t *colors, uint16_t size);\r\n+\r\n+// Delay function\r\n+void delayMS(int ms);\r\n+\r\n+// LCD initialization\r\n+void lcdInit(TFT_t *dev, int width, int height, int offsetx, int offsety, uint8_t orientation);\r\n+\r\n+// Gamma and brightness/contrast initialization\r\n+void init_gamma_values(void);\r\n+void init_brightness_contrast_values(void);\r\n+\r\n+// Drawing functions\r\n+void lcdDrawPixel(TFT_t *dev, uint16_t x, uint16_t y, uint16_t color);\r\n+void lcdDrawMultiPixels(TFT_t *dev, uint16_t x, uint16_t y, uint16_t size, uint16_t *colors);\r\n+void lcdDrawFillRect(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\n+void lcdFillScreen(TFT_t *dev, uint16_t color);\r\n+void lcdDrawLine(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\n+void lcdDrawRect(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\n+void lcdDrawRectAngle(TFT_t *dev, uint16_t xc, uint16_t yc, uint16_t w, uint16_t h,\r\n+                      uint16_t angle, uint16_t color);\r\n+void lcdDrawTriangle(TFT_t *dev, uint16_t xc, uint16_t yc, uint16_t w, uint16_t h,\r\n+                     uint16_t angle, uint16_t color);\r\n+void lcdDrawCircle(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t r, uint16_t color);\r\n+void lcdDrawFillCircle(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t r, uint16_t color);\r\n+void lcdDrawRoundRect(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,\r\n+                      uint16_t r, uint16_t color);\r\n+void lcdDrawArrow(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,\r\n+                  uint16_t w, uint16_t color);\r\n+void lcdDrawFillArrow(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,\r\n+                      uint16_t w, uint16_t color);\r\n+\r\n+// Color conversion\r\n+uint16_t rgb565_conv_with_color_tweaks(\r\n+    uint16_t r, uint16_t g, uint16_t b\r\n+);\r\n+\r\n+// Font drawing functions\r\n+int lcdDrawChar(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n+                uint8_t ascii, uint16_t color);\r\n+int lcdDrawString(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n+                  uint8_t *ascii, uint16_t color);\r\n+int lcdDrawCode(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n+                uint8_t code, uint16_t color);\r\n+// int lcdDrawUTF8Char(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n+//                     uint8_t *utf8, uint16_t color);\r\n+// int lcdDrawUTF8String(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n+//                       unsigned char *utfs, uint16_t color);\r\n+\r\n+// Font settings\r\n+void lcdSetFontDirection(TFT_t *dev, uint16_t dir);\r\n+void lcdSetFontFill(TFT_t *dev, uint16_t color);\r\n+void lcdUnsetFontFill(TFT_t *dev);\r\n+void lcdSetFontUnderLine(TFT_t *dev, uint16_t color);\r\n+void lcdUnsetFontUnderLine(TFT_t *dev);\r\n+\r\n+// Display control functions\r\n+void lcdDisplayOff(TFT_t *dev);\r\n+void lcdDisplayOn(TFT_t *dev);\r\n+void lcdInversionOff(TFT_t *dev);\r\n+void lcdInversionOn(TFT_t *dev);\r\n+void lcdBacklightOff(TFT_t *dev);\r\n+void lcdBacklightOn(TFT_t *dev);\r\n+\r\n+#endif /* MAIN_ST7796S_H_ */\r\n"
                },
                {
                    "date": 1733063202803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,146 +87,10 @@\n \r\n // Drawing functions\r\n void lcdDrawPixel(TFT_t *dev, uint16_t x, uint16_t y, uint16_t color);\r\n void lcdDrawMultiPixels(TFT_t *dev, uint16_t x, uint16_t y, uint16_t size, uint16_t *colors);\r\n-void lcdDrawFillRect(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\n-void lcdFillScreen(TFT_t *dev, uint16_t color);\r\n-void lcdDrawLine(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\n-void lcdDrawRect(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\n-void lcdDrawRectAngle(TFT_t *dev, uint16_t xc, uint16_t yc, uint16_t w, uint16_t h,\r\n-                      uint16_t angle, uint16_t color);\r\n-void lcdDrawTriangle(TFT_t *dev, uint16_t xc, uint16_t yc, uint16_t w, uint16_t h,\r\n-                     uint16_t angle, uint16_t color);\r\n-void lcdDrawCircle(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t r, uint16_t color);\r\n-void lcdDrawFillCircle(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t r, uint16_t color);\r\n-void lcdDrawRoundRect(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,\r\n-                      uint16_t r, uint16_t color);\r\n-void lcdDrawArrow(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,\r\n-                  uint16_t w, uint16_t color);\r\n-void lcdDrawFillArrow(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,\r\n-                      uint16_t w, uint16_t color);\r\n+void lcdDrawBitmap(TFT_t *dev, uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t *data);\r\n \r\n-// Color conversion\r\n-uint16_t rgb565_conv_with_color_tweaks(\r\n-    uint16_t r, uint16_t g, uint16_t b\r\n-);\r\n-\r\n-// Font drawing functions\r\n-int lcdDrawChar(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n-                uint8_t ascii, uint16_t color);\r\n-int lcdDrawString(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n-                  uint8_t *ascii, uint16_t color);\r\n-int lcdDrawCode(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n-                uint8_t code, uint16_t color);\r\n-// int lcdDrawUTF8Char(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n-//                     uint8_t *utf8, uint16_t color);\r\n-// int lcdDrawUTF8String(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n-//                       unsigned char *utfs, uint16_t color);\r\n-\r\n-// Font settings\r\n-void lcdSetFontDirection(TFT_t *dev, uint16_t dir);\r\n-void lcdSetFontFill(TFT_t *dev, uint16_t color);\r\n-void lcdUnsetFontFill(TFT_t *dev);\r\n-void lcdSetFontUnderLine(TFT_t *dev, uint16_t color);\r\n-void lcdUnsetFontUnderLine(TFT_t *dev);\r\n-\r\n-// Display control functions\r\n-void lcdDisplayOff(TFT_t *dev);\r\n-void lcdDisplayOn(TFT_t *dev);\r\n-void lcdInversionOff(TFT_t *dev);\r\n-void lcdInversionOn(TFT_t *dev);\r\n-void lcdBacklightOff(TFT_t *dev);\r\n-void lcdBacklightOn(TFT_t *dev);\r\n-\r\n-#endif /* MAIN_ST7796S_H_ */\r\n-#ifndef MAIN_ST7796S_H_\r\n-#define MAIN_ST7796S_H_\r\n-\r\n-#include \"driver/spi_master.h\"\r\n-#include \"fontx.h\"\r\n-\r\n-// Color definitions in RGB565 format\r\n-#define RED             0xF800\r\n-#define GREEN           0x07E0\r\n-#define BLUE            0x001F\r\n-#define BLACK           0x0000\r\n-#define WHITE           0xFFFF\r\n-#define GRAY            0x8410\r\n-#define YELLOW          0xFFE0\r\n-#define CYAN            0x07FF\r\n-#define PURPLE          0xF81F\r\n-\r\n-// Display orientations\r\n-#define DIRECTION0      0\r\n-#define DIRECTION90     1\r\n-#define DIRECTION180    2\r\n-#define DIRECTION270    3\r\n-\r\n-// Correctly define orientation constants for the display\r\n-#define ORIENTATION_LANDSCAPE           0x48 // Landscape orientation\r\n-#define ORIENTATION_PORTRAIT            0x28 // Portrait orientation\r\n-#define ORIENTATION_INVERTED_LANDSCAPE  0x88 // Inverted landscape orientation\r\n-#define ORIENTATION_INVERTED_PORTRAIT   0xE8 // Inverted portrait orientation\r\n-\r\n-typedef struct {\r\n-    uint16_t _width;\r\n-    uint16_t _height;\r\n-    uint16_t _offsetx;\r\n-    uint16_t _offsety;\r\n-    uint16_t _font_direction;\r\n-    bool     _font_fill;\r\n-    uint16_t _font_fill_color;\r\n-    bool     _font_underline;\r\n-    uint16_t _font_underline_color;\r\n-    int16_t  _dc;\r\n-    int16_t  _bl;\r\n-    int16_t  _reset;\r\n-    spi_device_handle_t _SPIHandle;\r\n-} TFT_t;\r\n-\r\n-typedef struct {\r\n-    // For Shadows (dark areas)\r\n-    int shadows_cyan_red;       // Range from -100 to 100 (%)\r\n-    int shadows_magenta_green;  // Range from -100 to 100 (%)\r\n-    int shadows_yellow_blue;    // Range from -100 to 100 (%)\r\n-\r\n-    // For Midtones (medium brightness areas)\r\n-    int midtones_cyan_red;\r\n-    int midtones_magenta_green;\r\n-    int midtones_yellow_blue;\r\n-\r\n-    // For Highlights (bright areas)\r\n-    int highlights_cyan_red;\r\n-    int highlights_magenta_green;\r\n-    int highlights_yellow_blue;\r\n-} ColorTweaks;\r\n-\r\n-// SPI initialization\r\n-void spi_master_init(TFT_t *dev, int16_t GPIO_MOSI, int16_t GPIO_SCLK, int16_t GPIO_CS,\r\n-                     int16_t GPIO_DC, int16_t GPIO_RESET, int16_t GPIO_BL);\r\n-\r\n-// SPI communication functions\r\n-bool spi_master_write_byte(spi_device_handle_t SPIHandle, const uint8_t *Data, size_t DataLength);\r\n-bool spi_master_write_command(TFT_t *dev, uint8_t cmd);\r\n-bool spi_master_write_data_byte(TFT_t *dev, uint8_t data);\r\n-bool spi_master_write_data_word(TFT_t *dev, uint16_t data);\r\n-bool spi_master_write_addr(TFT_t *dev, uint16_t addr1, uint16_t addr2);\r\n-bool spi_master_write_color(TFT_t *dev, uint16_t color, uint32_t size);\r\n-bool spi_master_write_colors(TFT_t *dev, uint16_t *colors, uint16_t size);\r\n-\r\n-// Delay function\r\n-void delayMS(int ms);\r\n-\r\n-// LCD initialization\r\n-void lcdInit(TFT_t *dev, int width, int height, int offsetx, int offsety, uint8_t orientation);\r\n-\r\n-// Gamma and brightness/contrast initialization\r\n-void init_gamma_values(void);\r\n-void init_brightness_contrast_values(void);\r\n-\r\n-// Drawing functions\r\n-void lcdDrawPixel(TFT_t *dev, uint16_t x, uint16_t y, uint16_t color);\r\n-void lcdDrawMultiPixels(TFT_t *dev, uint16_t x, uint16_t y, uint16_t size, uint16_t *colors);\r\n void lcdDrawFillRect(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\n void lcdFillScreen(TFT_t *dev, uint16_t color);\r\n void lcdDrawLine(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\n void lcdDrawRect(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\n"
                },
                {
                    "date": 1733107499647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,142 @@\n+// main/st7796s.h\r\n+\r\n+#ifndef MAIN_ST7796S_H_\r\n+#define MAIN_ST7796S_H_\r\n+\r\n+#include \"driver/spi_master.h\"\r\n+#include \"fontx.h\"\r\n+\r\n+// Color definitions in RGB565 format\r\n+#define RED             0xF800\r\n+#define GREEN           0x07E0\r\n+#define BLUE            0x001F\r\n+#define BLACK           0x0000\r\n+#define WHITE           0xFFFF\r\n+#define GRAY            0x8410\r\n+#define YELLOW          0xFFE0\r\n+#define CYAN            0x07FF\r\n+#define PURPLE          0xF81F\r\n+\r\n+// Display orientations\r\n+#define DIRECTION0      0\r\n+#define DIRECTION90     1\r\n+#define DIRECTION180    2\r\n+#define DIRECTION270    3\r\n+\r\n+// Correctly define orientation constants for the display\r\n+#define ORIENTATION_LANDSCAPE           0x48 // Landscape orientation\r\n+#define ORIENTATION_PORTRAIT            0x28 // Portrait orientation\r\n+#define ORIENTATION_INVERTED_LANDSCAPE  0x88 // Inverted landscape orientation\r\n+#define ORIENTATION_INVERTED_PORTRAIT   0xE8 // Inverted portrait orientation\r\n+\r\n+typedef struct {\r\n+    uint16_t _width;\r\n+    uint16_t _height;\r\n+    uint16_t _offsetx;\r\n+    uint16_t _offsety;\r\n+    uint16_t _font_direction;\r\n+    bool     _font_fill;\r\n+    uint16_t _font_fill_color;\r\n+    bool     _font_underline;\r\n+    uint16_t _font_underline_color;\r\n+    int16_t  _dc;\r\n+    int16_t  _bl;\r\n+    int16_t  _reset;\r\n+    spi_device_handle_t _SPIHandle;\r\n+} TFT_t;\r\n+\r\n+typedef struct {\r\n+    // For Shadows (dark areas)\r\n+    int shadows_cyan_red;       // Range from -100 to 100 (%)\r\n+    int shadows_magenta_green;  // Range from -100 to 100 (%)\r\n+    int shadows_yellow_blue;    // Range from -100 to 100 (%)\r\n+\r\n+    // For Midtones (medium brightness areas)\r\n+    int midtones_cyan_red;\r\n+    int midtones_magenta_green;\r\n+    int midtones_yellow_blue;\r\n+\r\n+    // For Highlights (bright areas)\r\n+    int highlights_cyan_red;\r\n+    int highlights_magenta_green;\r\n+    int highlights_yellow_blue;\r\n+} ColorTweaks;\r\n+\r\n+// SPI initialization\r\n+void spi_master_init(TFT_t *dev, int16_t GPIO_MOSI, int16_t GPIO_SCLK, int16_t GPIO_CS,\r\n+                     int16_t GPIO_DC, int16_t GPIO_RESET, int16_t GPIO_BL);\r\n+\r\n+// SPI communication functions\r\n+bool spi_master_write_byte(spi_device_handle_t SPIHandle, const uint8_t *Data, size_t DataLength);\r\n+bool spi_master_write_command(TFT_t *dev, uint8_t cmd);\r\n+bool spi_master_write_data_byte(TFT_t *dev, uint8_t data);\r\n+bool spi_master_write_data_word(TFT_t *dev, uint16_t data);\r\n+bool spi_master_write_addr(TFT_t *dev, uint16_t addr1, uint16_t addr2);\r\n+bool spi_master_write_color(TFT_t *dev, uint16_t color, uint32_t size);\r\n+bool spi_master_write_colors(TFT_t *dev, uint16_t *colors, uint16_t size);\r\n+\r\n+// Delay function\r\n+void delayMS(int ms);\r\n+\r\n+// LCD initialization\r\n+void lcdInit(TFT_t *dev, int width, int height, int offsetx, int offsety, uint8_t orientation);\r\n+\r\n+// Gamma and brightness/contrast initialization\r\n+void init_gamma_values(void);\r\n+void init_brightness_contrast_values(void);\r\n+\r\n+// Drawing functions\r\n+void lcdDrawPixel(TFT_t *dev, uint16_t x, uint16_t y, uint16_t color);\r\n+void lcdDrawMultiPixels(TFT_t *dev, uint16_t x, uint16_t y, uint16_t size, uint16_t *colors);\r\n+void lcdDrawBitmap(TFT_t *dev, uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t *data);\r\n+void lcdDrawBitmapRect(TFT_t *dev, uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t *data)\r\n+void lcdDrawFillRect(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\n+void lcdFillScreen(TFT_t *dev, uint16_t color);\r\n+void lcdDrawLine(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\n+void lcdDrawRect(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\n+void lcdDrawRectAngle(TFT_t *dev, uint16_t xc, uint16_t yc, uint16_t w, uint16_t h,\r\n+                      uint16_t angle, uint16_t color);\r\n+void lcdDrawTriangle(TFT_t *dev, uint16_t xc, uint16_t yc, uint16_t w, uint16_t h,\r\n+                     uint16_t angle, uint16_t color);\r\n+void lcdDrawCircle(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t r, uint16_t color);\r\n+void lcdDrawFillCircle(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t r, uint16_t color);\r\n+void lcdDrawRoundRect(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,\r\n+                      uint16_t r, uint16_t color);\r\n+void lcdDrawArrow(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,\r\n+                  uint16_t w, uint16_t color);\r\n+void lcdDrawFillArrow(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,\r\n+                      uint16_t w, uint16_t color);\r\n+\r\n+// Color conversion\r\n+uint16_t rgb565_conv_with_color_tweaks(\r\n+    uint16_t r, uint16_t g, uint16_t b\r\n+);\r\n+\r\n+// Font drawing functions\r\n+int lcdDrawChar(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n+                uint8_t ascii, uint16_t color);\r\n+int lcdDrawString(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n+                  uint8_t *ascii, uint16_t color);\r\n+int lcdDrawCode(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n+                uint8_t code, uint16_t color);\r\n+// int lcdDrawUTF8Char(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n+//                     uint8_t *utf8, uint16_t color);\r\n+// int lcdDrawUTF8String(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n+//                       unsigned char *utfs, uint16_t color);\r\n+\r\n+// Font settings\r\n+void lcdSetFontDirection(TFT_t *dev, uint16_t dir);\r\n+void lcdSetFontFill(TFT_t *dev, uint16_t color);\r\n+void lcdUnsetFontFill(TFT_t *dev);\r\n+void lcdSetFontUnderLine(TFT_t *dev, uint16_t color);\r\n+void lcdUnsetFontUnderLine(TFT_t *dev);\r\n+\r\n+// Display control functions\r\n+void lcdDisplayOff(TFT_t *dev);\r\n+void lcdDisplayOn(TFT_t *dev);\r\n+void lcdInversionOff(TFT_t *dev);\r\n+void lcdInversionOn(TFT_t *dev);\r\n+void lcdBacklightOff(TFT_t *dev);\r\n+void lcdBacklightOn(TFT_t *dev);\r\n+\r\n+#endif /* MAIN_ST7796S_H_ */\r\n"
                },
                {
                    "date": 1733187190909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,11 @@\n // Drawing functions\r\n void lcdDrawPixel(TFT_t *dev, uint16_t x, uint16_t y, uint16_t color);\r\n void lcdDrawMultiPixels(TFT_t *dev, uint16_t x, uint16_t y, uint16_t size, uint16_t *colors);\r\n void lcdDrawBitmap(TFT_t *dev, uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t *data);\r\n-void lcdDrawBitmapRect(TFT_t *dev, uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t *data)\r\n+void lcdStartWrite(TFT_t *dev)\r\n+void lcdDrawBitmapRect(TFT_t *dev, uint16_t x, uint16_t y, uint16_t w,\r\n+                       uint16_t h, uint16_t *data);\r\n void lcdDrawFillRect(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\n void lcdFillScreen(TFT_t *dev, uint16_t color);\r\n void lcdDrawLine(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\n void lcdDrawRect(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\n@@ -139,146 +141,4 @@\n void lcdBacklightOff(TFT_t *dev);\r\n void lcdBacklightOn(TFT_t *dev);\r\n \r\n #endif /* MAIN_ST7796S_H_ */\r\n-// main/st7796s.h\r\n-\r\n-#ifndef MAIN_ST7796S_H_\r\n-#define MAIN_ST7796S_H_\r\n-\r\n-#include \"driver/spi_master.h\"\r\n-#include \"fontx.h\"\r\n-\r\n-// Color definitions in RGB565 format\r\n-#define RED             0xF800\r\n-#define GREEN           0x07E0\r\n-#define BLUE            0x001F\r\n-#define BLACK           0x0000\r\n-#define WHITE           0xFFFF\r\n-#define GRAY            0x8410\r\n-#define YELLOW          0xFFE0\r\n-#define CYAN            0x07FF\r\n-#define PURPLE          0xF81F\r\n-\r\n-// Display orientations\r\n-#define DIRECTION0      0\r\n-#define DIRECTION90     1\r\n-#define DIRECTION180    2\r\n-#define DIRECTION270    3\r\n-\r\n-// Correctly define orientation constants for the display\r\n-#define ORIENTATION_LANDSCAPE           0x48 // Landscape orientation\r\n-#define ORIENTATION_PORTRAIT            0x28 // Portrait orientation\r\n-#define ORIENTATION_INVERTED_LANDSCAPE  0x88 // Inverted landscape orientation\r\n-#define ORIENTATION_INVERTED_PORTRAIT   0xE8 // Inverted portrait orientation\r\n-\r\n-typedef struct {\r\n-    uint16_t _width;\r\n-    uint16_t _height;\r\n-    uint16_t _offsetx;\r\n-    uint16_t _offsety;\r\n-    uint16_t _font_direction;\r\n-    bool     _font_fill;\r\n-    uint16_t _font_fill_color;\r\n-    bool     _font_underline;\r\n-    uint16_t _font_underline_color;\r\n-    int16_t  _dc;\r\n-    int16_t  _bl;\r\n-    int16_t  _reset;\r\n-    spi_device_handle_t _SPIHandle;\r\n-} TFT_t;\r\n-\r\n-typedef struct {\r\n-    // For Shadows (dark areas)\r\n-    int shadows_cyan_red;       // Range from -100 to 100 (%)\r\n-    int shadows_magenta_green;  // Range from -100 to 100 (%)\r\n-    int shadows_yellow_blue;    // Range from -100 to 100 (%)\r\n-\r\n-    // For Midtones (medium brightness areas)\r\n-    int midtones_cyan_red;\r\n-    int midtones_magenta_green;\r\n-    int midtones_yellow_blue;\r\n-\r\n-    // For Highlights (bright areas)\r\n-    int highlights_cyan_red;\r\n-    int highlights_magenta_green;\r\n-    int highlights_yellow_blue;\r\n-} ColorTweaks;\r\n-\r\n-// SPI initialization\r\n-void spi_master_init(TFT_t *dev, int16_t GPIO_MOSI, int16_t GPIO_SCLK, int16_t GPIO_CS,\r\n-                     int16_t GPIO_DC, int16_t GPIO_RESET, int16_t GPIO_BL);\r\n-\r\n-// SPI communication functions\r\n-bool spi_master_write_byte(spi_device_handle_t SPIHandle, const uint8_t *Data, size_t DataLength);\r\n-bool spi_master_write_command(TFT_t *dev, uint8_t cmd);\r\n-bool spi_master_write_data_byte(TFT_t *dev, uint8_t data);\r\n-bool spi_master_write_data_word(TFT_t *dev, uint16_t data);\r\n-bool spi_master_write_addr(TFT_t *dev, uint16_t addr1, uint16_t addr2);\r\n-bool spi_master_write_color(TFT_t *dev, uint16_t color, uint32_t size);\r\n-bool spi_master_write_colors(TFT_t *dev, uint16_t *colors, uint16_t size);\r\n-\r\n-// Delay function\r\n-void delayMS(int ms);\r\n-\r\n-// LCD initialization\r\n-void lcdInit(TFT_t *dev, int width, int height, int offsetx, int offsety, uint8_t orientation);\r\n-\r\n-// Gamma and brightness/contrast initialization\r\n-void init_gamma_values(void);\r\n-void init_brightness_contrast_values(void);\r\n-\r\n-// Drawing functions\r\n-void lcdDrawPixel(TFT_t *dev, uint16_t x, uint16_t y, uint16_t color);\r\n-void lcdDrawMultiPixels(TFT_t *dev, uint16_t x, uint16_t y, uint16_t size, uint16_t *colors);\r\n-void lcdDrawBitmap(TFT_t *dev, uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t *data);\r\n-\r\n-void lcdDrawFillRect(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\n-void lcdFillScreen(TFT_t *dev, uint16_t color);\r\n-void lcdDrawLine(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\n-void lcdDrawRect(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\n-void lcdDrawRectAngle(TFT_t *dev, uint16_t xc, uint16_t yc, uint16_t w, uint16_t h,\r\n-                      uint16_t angle, uint16_t color);\r\n-void lcdDrawTriangle(TFT_t *dev, uint16_t xc, uint16_t yc, uint16_t w, uint16_t h,\r\n-                     uint16_t angle, uint16_t color);\r\n-void lcdDrawCircle(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t r, uint16_t color);\r\n-void lcdDrawFillCircle(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t r, uint16_t color);\r\n-void lcdDrawRoundRect(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,\r\n-                      uint16_t r, uint16_t color);\r\n-void lcdDrawArrow(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,\r\n-                  uint16_t w, uint16_t color);\r\n-void lcdDrawFillArrow(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,\r\n-                      uint16_t w, uint16_t color);\r\n-\r\n-// Color conversion\r\n-uint16_t rgb565_conv_with_color_tweaks(\r\n-    uint16_t r, uint16_t g, uint16_t b\r\n-);\r\n-\r\n-// Font drawing functions\r\n-int lcdDrawChar(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n-                uint8_t ascii, uint16_t color);\r\n-int lcdDrawString(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n-                  uint8_t *ascii, uint16_t color);\r\n-int lcdDrawCode(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n-                uint8_t code, uint16_t color);\r\n-// int lcdDrawUTF8Char(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n-//                     uint8_t *utf8, uint16_t color);\r\n-// int lcdDrawUTF8String(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n-//                       unsigned char *utfs, uint16_t color);\r\n-\r\n-// Font settings\r\n-void lcdSetFontDirection(TFT_t *dev, uint16_t dir);\r\n-void lcdSetFontFill(TFT_t *dev, uint16_t color);\r\n-void lcdUnsetFontFill(TFT_t *dev);\r\n-void lcdSetFontUnderLine(TFT_t *dev, uint16_t color);\r\n-void lcdUnsetFontUnderLine(TFT_t *dev);\r\n-\r\n-// Display control functions\r\n-void lcdDisplayOff(TFT_t *dev);\r\n-void lcdDisplayOn(TFT_t *dev);\r\n-void lcdInversionOff(TFT_t *dev);\r\n-void lcdInversionOn(TFT_t *dev);\r\n-void lcdBacklightOff(TFT_t *dev);\r\n-void lcdBacklightOn(TFT_t *dev);\r\n-\r\n-#endif /* MAIN_ST7796S_H_ */\r\n"
                },
                {
                    "date": 1733187199544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,9 +89,9 @@\n void lcdDrawPixel(TFT_t *dev, uint16_t x, uint16_t y, uint16_t color);\r\n void lcdDrawMultiPixels(TFT_t *dev, uint16_t x, uint16_t y, uint16_t size, uint16_t *colors);\r\n void lcdDrawBitmap(TFT_t *dev, uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t *data);\r\n void lcdStartWrite(TFT_t *dev);\r\n-\r\n+void lcdSetWindow(TFT_t *dev, uint16_t x, uint16_t y, uint16_t w, uint16_t h);\r\n void lcdDrawBitmapRect(TFT_t *dev, uint16_t x, uint16_t y, uint16_t w,\r\n                        uint16_t h, uint16_t *data);\r\n void lcdDrawFillRect(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\n void lcdFillScreen(TFT_t *dev, uint16_t color);\r\n"
                },
                {
                    "date": 1733189872489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,9 +89,9 @@\n void lcdDrawPixel(TFT_t *dev, uint16_t x, uint16_t y, uint16_t color);\r\n void lcdDrawMultiPixels(TFT_t *dev, uint16_t x, uint16_t y, uint16_t size, uint16_t *colors);\r\n void lcdDrawBitmap(TFT_t *dev, uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t *data);\r\n void lcdStartWrite(TFT_t *dev);\r\n-void lcdSetWindow(TFT_t *dev, uint16_t x, uint16_t y, uint16_t w, uint16_t h);RAND_MAX\r\n+void lcdSetWindow(TFT_t *dev, uint16_t x, uint16_t y, uint16_t w, uint16_t h);\r\n void lcdDrawBitmapRect(TFT_t *dev, uint16_t x, uint16_t y, uint16_t w,\r\n                        uint16_t h, uint16_t *data);\r\n void lcdDrawFillRect(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\n void lcdFillScreen(TFT_t *dev, uint16_t color);\r\n"
                }
            ],
            "date": 1731815031194,
            "name": "Commit-0",
            "content": "#ifndef MAIN_ST7796S_H_\r\n#define MAIN_ST7796S_H_\r\n\r\n#include \"driver/spi_master.h\"\r\n#include \"fontx.h\"\r\n\r\n// Color definitions in RGB565 format\r\n#define RED             0xF800\r\n#define GREEN           0x07E0\r\n#define BLUE            0x001F\r\n#define BLACK           0x0000\r\n#define WHITE           0xFFFF\r\n#define GRAY            0x8410\r\n#define YELLOW          0xFFE0\r\n#define CYAN            0x07FF\r\n#define PURPLE          0xF81F\r\n\r\n// Display orientations\r\n#define DIRECTION0      0\r\n#define DIRECTION90     1\r\n#define DIRECTION180    2\r\n#define DIRECTION270    3\r\n\r\ntypedef struct {\r\n    uint16_t _width;\r\n    uint16_t _height;\r\n    uint16_t _offsetx;\r\n    uint16_t _offsety;\r\n    uint16_t _font_direction;\r\n    bool     _font_fill;\r\n    uint16_t _font_fill_color;\r\n    bool     _font_underline;\r\n    uint16_t _font_underline_color;\r\n    int16_t  _dc;\r\n    int16_t  _bl;\r\n    int16_t  _reset;\r\n    spi_device_handle_t _SPIHandle;\r\n} TFT_t;\r\n\r\n// SPI initialization\r\nvoid spi_master_init(TFT_t *dev, int16_t GPIO_MOSI, int16_t GPIO_SCLK, int16_t GPIO_CS,\r\n                     int16_t GPIO_DC, int16_t GPIO_RESET, int16_t GPIO_BL);\r\n\r\n// SPI communication functions\r\nbool spi_master_write_byte(spi_device_handle_t SPIHandle, const uint8_t *Data, size_t DataLength);\r\nbool spi_master_write_command(TFT_t *dev, uint8_t cmd);\r\nbool spi_master_write_data_byte(TFT_t *dev, uint8_t data);\r\nbool spi_master_write_data_word(TFT_t *dev, uint16_t data);\r\nbool spi_master_write_addr(TFT_t *dev, uint16_t addr1, uint16_t addr2);\r\nbool spi_master_write_color(TFT_t *dev, uint16_t color, uint32_t size);\r\nbool spi_master_write_colors(TFT_t *dev, uint16_t *colors, uint16_t size);\r\n\r\n// Delay function\r\nvoid delayMS(int ms);\r\n\r\n// LCD initialization\r\nvoid lcdInit(TFT_t *dev, int width, int height, int offsetx, int offsety);\r\n\r\n// Drawing functions\r\nvoid lcdDrawPixel(TFT_t *dev, uint16_t x, uint16_t y, uint16_t color);\r\nvoid lcdDrawMultiPixels(TFT_t *dev, uint16_t x, uint16_t y, uint16_t size, uint16_t *colors);\r\nvoid lcdDrawFillRect(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\nvoid lcdFillScreen(TFT_t *dev, uint16_t color);\r\nvoid lcdDrawLine(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\nvoid lcdDrawRect(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\nvoid lcdDrawRectAngle(TFT_t *dev, uint16_t xc, uint16_t yc, uint16_t w, uint16_t h,\r\n                      uint16_t angle, uint16_t color);\r\nvoid lcdDrawTriangle(TFT_t *dev, uint16_t xc, uint16_t yc, uint16_t w, uint16_t h,\r\n                     uint16_t angle, uint16_t color);\r\nvoid lcdDrawCircle(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t r, uint16_t color);\r\nvoid lcdDrawFillCircle(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t r, uint16_t color);\r\nvoid lcdDrawRoundRect(TFT_t *dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,\r\n                      uint16_t r, uint16_t color);\r\nvoid lcdDrawArrow(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,\r\n                  uint16_t w, uint16_t color);\r\nvoid lcdDrawFillArrow(TFT_t *dev, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,\r\n                      uint16_t w, uint16_t color);\r\n\r\n// Color conversion\r\nuint16_t rgb565_conv(uint16_t r, uint16_t g, uint16_t b);\r\n\r\n// Font drawing functions\r\nint lcdDrawChar(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n                uint8_t ascii, uint16_t color);\r\nint lcdDrawString(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n                  uint8_t *ascii, uint16_t color);\r\nint lcdDrawCode(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n                uint8_t code, uint16_t color);\r\n// int lcdDrawUTF8Char(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n//                     uint8_t *utf8, uint16_t color);\r\n// int lcdDrawUTF8String(TFT_t *dev, FontxFile *fx, uint16_t x, uint16_t y,\r\n//                       unsigned char *utfs, uint16_t color);\r\n\r\n// Font settings\r\nvoid lcdSetFontDirection(TFT_t *dev, uint16_t dir);\r\nvoid lcdSetFontFill(TFT_t *dev, uint16_t color);\r\nvoid lcdUnsetFontFill(TFT_t *dev);\r\nvoid lcdSetFontUnderLine(TFT_t *dev, uint16_t color);\r\nvoid lcdUnsetFontUnderLine(TFT_t *dev);\r\n\r\n// Display control functions\r\nvoid lcdDisplayOff(TFT_t *dev);\r\nvoid lcdDisplayOn(TFT_t *dev);\r\nvoid lcdInversionOff(TFT_t *dev);\r\nvoid lcdInversionOn(TFT_t *dev);\r\nvoid lcdBacklightOff(TFT_t *dev);\r\nvoid lcdBacklightOn(TFT_t *dev);\r\n\r\n#endif /* MAIN_ST7796S_H_ */\r\n"
        }
    ]
}