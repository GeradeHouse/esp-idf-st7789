{
    "sourceFile": "main/st7789.h",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1731807994706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731808115517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n bool spi_master_write_data_byte(TFT_t * dev, uint8_t data);\r\n bool spi_master_write_data_word(TFT_t * dev, uint16_t data);\r\n bool spi_master_write_addr(TFT_t * dev, uint16_t addr1, uint16_t addr2);\r\n bool spi_master_write_color(TFT_t * dev, uint16_t color, uint32_t size);\r\n-bool spi_master_write_colors(TFT_t * dev, uint16_t * colors, uint32_t size);\r\n+bool spi_master_write_colors(TFT_t * dev, uint16_t * colors, uint16_t size);\r\n \r\n void delayMS(int ms);\r\n void lcdInit(TFT_t * dev, int width, int height, int offsetx, int offsety);\r\n void lcdDrawPixel(TFT_t * dev, uint16_t x, uint16_t y, uint16_t color);\r\n"
                }
            ],
            "date": 1731807994706,
            "name": "Commit-0",
            "content": "#ifndef MAIN_ST7789_H_\r\n#define MAIN_ST7789_H_\r\n\r\n#include \"driver/spi_master.h\"\r\n#include \"fontx.h\"\r\n\r\n#define RED\t\t\t0xf800\r\n#define GREEN\t\t\t0x07e0\r\n#define BLUE\t\t\t0x001f\r\n#define BLACK\t\t\t0x0000\r\n#define WHITE\t\t\t0xffff\r\n#define GRAY\t\t\t0x8c51\r\n#define YELLOW\t\t\t0xFFE0\r\n#define CYAN\t\t\t0x07FF\r\n#define PURPLE\t\t\t0xF81F\r\n\r\n\r\n#define DIRECTION0\t\t0\r\n#define DIRECTION90\t\t1\r\n#define DIRECTION180\t\t2\r\n#define DIRECTION270\t\t3\r\n\r\n\r\ntypedef struct {\r\n\tuint16_t _width;\r\n\tuint16_t _height;\r\n\tuint16_t _offsetx;\r\n\tuint16_t _offsety;\r\n\tuint16_t _font_direction;\r\n\tuint16_t _font_fill;\r\n\tuint16_t _font_fill_color;\r\n\tuint16_t _font_underline;\r\n\tuint16_t _font_underline_color;\r\n\tint16_t _dc;\r\n\tint16_t _bl;\r\n\tspi_device_handle_t _SPIHandle;\r\n} TFT_t;\r\n\r\nvoid spi_master_init(TFT_t * dev, int16_t GPIO_MOSI, int16_t GPIO_SCLK, int16_t GPIO_CS, int16_t GPIO_DC, int16_t GPIO_RESET, int16_t GPIO_BL);\r\nbool spi_master_write_byte(spi_device_handle_t SPIHandle, const uint8_t* Data, size_t DataLength);\r\nbool spi_master_write_command(TFT_t * dev, uint8_t cmd);\r\nbool spi_master_write_data_byte(TFT_t * dev, uint8_t data);\r\nbool spi_master_write_data_word(TFT_t * dev, uint16_t data);\r\nbool spi_master_write_addr(TFT_t * dev, uint16_t addr1, uint16_t addr2);\r\nbool spi_master_write_color(TFT_t * dev, uint16_t color, uint321_t size);\r\nbool spi_master_write_colors(TFT_t * dev, uint16_t * colors, uint16_t size);\r\n\r\nvoid delayMS(int ms);\r\nvoid lcdInit(TFT_t * dev, int width, int height, int offsetx, int offsety);\r\nvoid lcdDrawPixel(TFT_t * dev, uint16_t x, uint16_t y, uint16_t color);\r\nvoid lcdDrawMultiPixels(TFT_t * dev, uint16_t x, uint16_t y, uint16_t size, uint16_t * colors);\r\nvoid lcdDrawFillRect(TFT_t * dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\nvoid lcdDisplayOff(TFT_t * dev);\r\nvoid lcdDisplayOn(TFT_t * dev);\r\nvoid lcdFillScreen(TFT_t * dev, uint16_t color);\r\nvoid lcdDrawLine(TFT_t * dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\nvoid lcdDrawRect(TFT_t * dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\r\nvoid lcdDrawRectAngle(TFT_t * dev, uint16_t xc, uint16_t yc, uint16_t w, uint16_t h, uint16_t angle, uint16_t color);\r\nvoid lcdDrawTriangle(TFT_t * dev, uint16_t xc, uint16_t yc, uint16_t w, uint16_t h, uint16_t angle, uint16_t color);\r\nvoid lcdDrawCircle(TFT_t * dev, uint16_t x0, uint16_t y0, uint16_t r, uint16_t color);\r\nvoid lcdDrawFillCircle(TFT_t * dev, uint16_t x0, uint16_t y0, uint16_t r, uint16_t color);\r\nvoid lcdDrawRoundRect(TFT_t * dev, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t r, uint16_t color);\r\nvoid lcdDrawArrow(TFT_t * dev, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t w, uint16_t color);\r\nvoid lcdDrawFillArrow(TFT_t * dev, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t w, uint16_t color);\r\nuint16_t rgb565_conv(uint16_t r, uint16_t g, uint16_t b);\r\nint lcdDrawChar(TFT_t * dev, FontxFile *fx, uint16_t x, uint16_t y, uint8_t ascii, uint16_t color);\r\nint lcdDrawString(TFT_t * dev, FontxFile *fx, uint16_t x, uint16_t y, uint8_t * ascii, uint16_t color);\r\nint lcdDrawCode(TFT_t * dev, FontxFile *fx, uint16_t x,uint16_t y,uint8_t code,uint16_t color);\r\n//int lcdDrawUTF8Char(TFT_t * dev, FontxFile *fx, uint16_t x, uint16_t y, uint8_t *utf8, uint16_t color);\r\n//int lcdDrawUTF8String(TFT_t * dev, FontxFile *fx, uint16_t x, uint16_t y, unsigned char *utfs, uint16_t color);\r\nvoid lcdSetFontDirection(TFT_t * dev, uint16_t);\r\nvoid lcdSetFontFill(TFT_t * dev, uint16_t color);\r\nvoid lcdUnsetFontFill(TFT_t * dev);\r\nvoid lcdSetFontUnderLine(TFT_t * dev, uint16_t color);\r\nvoid lcdUnsetFontUnderLine(TFT_t * dev);\r\nvoid lcdBacklightOff(TFT_t * dev);\r\nvoid lcdBacklightOn(TFT_t * dev);\r\nvoid lcdInversionOff(TFT_t * dev);\r\nvoid lcdInversionOn(TFT_t * dev);\r\n#endif /* MAIN_ST7789_H_ */\r\n\r\n"
        }
    ]
}